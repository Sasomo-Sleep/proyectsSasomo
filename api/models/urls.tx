POST /singup { model’s properties } -> 201 user
POST /login -> 200 user
POST /logout, isAuthenticated, -> No content 204

PATCH /profile, isAuthenticated -> 200 modified user
DELETE /profile, isAuthenticated -> 204 No content
GET /profile, isAuthenticated -> 200 user

 ----------HOST---------------------
POST /properties, isAuthenticated -> 201 property  accep||reject
GET /properties, isAuthenticated -> 200 property
PATCH /properties/:id, isOwner, isAuthenticated-> 200 property
DELETE /properties/:id, isOwner,isAuthenticated -> 204 property

------------GUEST---------------------
POST /properties/:id/book, isAuthenticated -> 201 booking 
GET /bookings, isAuthenticated ->  200 booking
Get /bookings/:id
DELETE /booking/:id, isAuthenticated  -> 204 booking
POST /bookings/:id/review

------------- CHAT-------------------------
GET /profile/my-messages/:id , isAuthenticated -> 200 chats
GET /profile/chat/:id, isAuthenticated -> 200 chat
POST / profile/chat/:id, isAuthenticated -> 
POST /profile/chat/:id/message, isAuthenticated  -> 201 chat 




FUNCIONALIDADES BONITAS
-Sistema Pago PayPal
-Geolocalización
- Carrusel 

module.exports.create = (req, res, next) => {
    const newChat = new Chat({ users: [req.params.id, req.user.id] })
    Chat.find({ users: { $all: [req.params.id, req.user.id] }})
        .then(chat => {
            return Chat.create(newChat)
                .then(chat => res.json(chat))
        })
        .catch(next)
}

router.post('/profile/:profileId/chat', secure.isAuthenticated, chat.create)
router.get('/profile/:profileId/chat/:id', secure.isAuthenticated, chat.getChat)
router.get('/profile/:profileId/my-messages', secure.isAuthenticated, chat.allChats) // -------> no va
router.post('/profile/:profileId/chat/:id/message', secure.isAuthenticated, chat.message)


/* module.exports.fake = (req, res, next) => {
    const newChat = new Chat({ users: [req.params.guest._id, booking.property.owner._id] })
    Booking.findById(req.params.bookingId)
        .then(booking => {
            Chat.find({ users: { $all: [booking.guest._id, booking.property.owner._id] } })
        })
        .catch(next)
} */
/* module.exports.create = (req, res, next) => {

    const newChat = new Chat({ users: [req.params.id, req.user.id] })
     Chat.find({ users: { $all: [req.params.id, req.user._id] }})
        .then(chat => {
            if (chat.length) {
                res.redirect(`/profile/chat/${chat[0]._id}`)
            } else {
                return newChat.save()
                .then(chat => {
                    res.redirect(`/profile/chat/${chat._id}`)
                })
            }
        })
        .catch(next)

} */
/* module.exports.create = (req, res, next) => {
    const newChat = new Chat({ users: [req.params.id, req.user.id] })
    Chat.find({ users: { $all: [req.params.id, req.user.id] } })
        .then(chat => {
            if (chat.length) {
                res.redirect(`/profile/${req.params.id}/chat/${chat[0].id}`)
            } else {
                return Chat.create(newChat)                      // -----------------------> funciona
                    .then(chat => {
                        res.redirect(`/profile/${req.params.id}/chat/${chat.id}`)
                        res.json(chat)
                        res.status({ "suces": "sucess" })
                    })
            }
        })
        .catch(next)
} */

/* module.exports.create = (req, res, next) => {
    const newChat = new Chat({ users: [req.params.profileId, req.user.id] })
    Chat.find({ users: { $all: [req.params.profileId, req.user.id] } })
        .then(chat => {
            return Chat.create(newChat)                      // -----------------------> funciona
                .then(chat => res.json(chat))
        })
        .catch(next)
}

module.exports.getChat = (req, res, next) => {
    Chat.findById(req.params.bookingId)
        //.populate('users')
        //.populate('messages')
        .then(chat => res.json(chat))
        .catch(next)
}

module.exports.allChats = (req, res, next) => {
    Chat.findById({ users: req.user.bookingId })
        .then(chats => res.json(chats))
        .catch(next)
}

module.exports.message = (req, res, next) => {
    Chat.findById(req.params.id)
        .then(chat => {
            console.log(chat)
            return Message.create({
                message: req.body.message,
                user: req.user.id
            })
                .then(message => {
                    return Chat.updateOne(
                        { id: chat.id },
                        { $push: { messages: message.id } }
                    )
                        .then(message => {
                            res.json(message)
                        })
                })
        })
        .catch(next)
} */